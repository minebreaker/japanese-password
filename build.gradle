plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.0'
}

group 'rip.deadcode'
version '0.2'

repositories {
    mavenCentral()
    maven {
        url = "https://maven.pkg.github.com/minebreaker/Izvestia"
        credentials {
            username = project.hasProperty("GITHUB_USER") ? GITHUB_USER : ''
            password = project.hasProperty("GITHUB_TOKEN") ? GITHUB_TOKEN : ''
        }
    }
}

dependencies {
    implementation(
            'com.google.guava:guava:31.0.1-jre',
            'com.google.code.findbugs:jsr305:3.0.2',
            'commons-cli:commons-cli:1.5.0'

//            'com.google.code.gson:gson:2.8.5',
//            'com.google.http-client:google-http-client:1.23.0',
//            'com.google.mug:mug:2.2',
//            'com.typesafe:config:1.3.3',
//            'org.slf4j:slf4j-api:1.7.26',
//            'org.slf4j:jul-to-slf4j:1.7.26', // Guava uses java.util.logging
//            'ch.qos.logback:logback-classic:1.2.3'
    )
//    compileOnly 'org.projectlombok:lombok:1.16.20'
    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.8.2',
            'com.google.truth:truth:1.1.3',
            'com.google.truth.extensions:truth-java8-extension:1.1.3',
            'org.mockito:mockito-core:4.1.0',
            'rip.deadcode:izvestia:0.4.0',
//            'com.google.jimfs:jimfs:1.1'
    )
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
    useJUnitPlatform()
    jvmArgs '-Dfile.encoding=UTF-8'
}


compileKotlin {
    kotlinOptions.jvmTarget = "17"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "17"
}

jar {
    manifest {
        attributes(
                'Main-Class': 'rip.deadcode.jppass.MainKt'
        )
    }

    // Fat jar
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

task buildImage(type: Exec, dependsOn: jar) {
    def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem
    def jar = jar.archiveFileName.get()
    if (os.isLinux()) {
        commandLine "./script/build-image.sh", jar
    } else if (os.isWindows()) {
        commandLine "script/build-image.cmd", jar
    } else {
        throw new RuntimeException("Unsupported operating system: ${os}")
    }
}
assemble.dependsOn(buildImage)
