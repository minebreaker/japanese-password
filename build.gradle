import java.nio.charset.StandardCharsets
import java.nio.file.Files

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.0'
}

group 'rip.deadcode'
version '0.3.0'

repositories {
    mavenCentral()
    maven {
        url = "https://maven.pkg.github.com/minebreaker/Izvestia"
        credentials {
            username = project.hasProperty("GITHUB_USER") ? GITHUB_USER : ''
            password = project.hasProperty("GITHUB_TOKEN") ? GITHUB_TOKEN : ''
        }
    }
}

dependencies {
    implementation(
            'com.google.guava:guava:31.0.1-jre',
            'com.google.code.findbugs:jsr305:3.0.2',
            'commons-cli:commons-cli:1.5.0'

//            'com.google.code.gson:gson:2.8.5',
//            'com.google.http-client:google-http-client:1.23.0',
//            'com.google.mug:mug:2.2',
//            'com.typesafe:config:1.3.3',
//            'org.slf4j:slf4j-api:1.7.26',
//            'org.slf4j:jul-to-slf4j:1.7.26', // Guava uses java.util.logging
//            'ch.qos.logback:logback-classic:1.2.3'
    )
//    compileOnly 'org.projectlombok:lombok:1.16.20'
    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.8.2',
            'com.google.truth:truth:1.1.3',
            'com.google.truth.extensions:truth-java8-extension:1.1.3',
            'org.mockito:mockito-core:4.1.0',
            'rip.deadcode:izvestia:0.4.0',
//            'com.google.jimfs:jimfs:1.1'
    )
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
    useJUnitPlatform()
    jvmArgs '-Dfile.encoding=UTF-8'
}


compileKotlin {
    kotlinOptions.jvmTarget = "17"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "17"
}

jar {
    manifest {
        attributes(
                'Main-Class': 'rip.deadcode.jppass.MainKt'
        )
    }

    // Fat jar
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

def resourceDir = sourceSets.main.output.resourcesDir.toPath()
def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem
def nativeImageDir = buildDir.toPath().resolve("native-image")
def jarName = jar.archiveFileName.get()
def nativeImageExt = os.isWindows() ? ".exe" : ""
def nativeImageName = jarName.replace(".jar", nativeImageExt)
def nativeImagePath = nativeImageDir.resolve(nativeImageName)


task writeCommitHash(type: Exec) {
    def commitFile = resourceDir.resolve("commit")

    // This will disable incremental compile
    doNotTrackState("")
    outputs.file(commitFile)

    def baos = new ByteArrayOutputStream()
    standardOutput = baos
    commandLine "git", "rev-parse", "HEAD"
    doLast {
        Files.createDirectories(resourceDir)
        Files.writeString(commitFile, new String(baos.toByteArray(), StandardCharsets.UTF_8))
    }
}

task writeVersion {
    def versionFile = resourceDir.resolve("version")

    doNotTrackState("")
    outputs.file(versionFile)

    doLast {
        Files.createDirectories(resourceDir)
        Files.writeString(versionFile, version.toString())
    }
}
processResources.dependsOn(writeCommitHash, writeVersion)
compileTestKotlin.dependsOn(processResources)  // Gradle warns. Not sure why this is not default

task runGraal(type: Exec, dependsOn: jar) {
    if (os.isLinux()) {
        commandLine projectDir.toPath().resolve("script/build-image.sh"), jarName
    } else if (os.isWindows()) {
        commandLine projectDir.toPath().resolve("script/build-image.cmd"), jarName
    } else {
        throw new RuntimeException("Unsupported operating system: ${os}")
    }

    environment "PROJECT_HOME", projectDir
    workingDir nativeImageDir
    inputs.file(jar.archiveFile)
    outputs.file(nativeImagePath)

    doFirst {
        Files.createDirectories(nativeImageDir)
    }
}

task renameNativeImage(type: Copy, dependsOn: runGraal) {
    def outputName = "jppass" + nativeImageExt

    from nativeImageDir
    into nativeImageDir
    include nativeImageName
    rename nativeImageName, outputName

    inputs.file(nativeImagePath)
    outputs.file(nativeImageDir.resolve(outputName))
}

task buildNativeImage(dependsOn: renameNativeImage)
assemble.dependsOn(buildNativeImage)
